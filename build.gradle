buildscript
        {
            repositories
                    {
                        maven { url = 'https://maven.minecraftforge.net' }
                        maven { url = 'https://repo.spongepowered.org/maven' }
                        maven { url = 'https://maven.parchmentmc.org' }
                        mavenCentral()
                    }
            dependencies
                    {
                        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
                        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
                        classpath group: 'org.parchmentmc', name: 'librarian', version: '1.+'
                    }
        }

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'

def commits = 'git rev-list --count HEAD'.execute().in.text.trim()
def shortHash = 'git rev-parse --short HEAD'.execute().in.text.trim()
version = "${mc_version}-${mod_version}-${version_type}.${shortHash}.${commits}"
group= "${package_group}"
archivesBaseName = "${mod_id}"

compileJava.options.encoding = 'UTF-8'
java.toolchain.languageVersion = JavaLanguageVersion.of(8)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft
        {
            // https://ldtteam.jfrog.io/ui/native/parchmentmc-public/org/parchmentmc/data
            mappings channel: "${mappings_channel}", version: "${mappings_version}"

            runs
                    {
                        client
                                {
                                    arg "-mixin.config=${mod_id}.mixins.json"

                                    workingDirectory project.file('run')

                                    // Recommended logging data for a userdev environment
                                    property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

                                    // Recommended logging level for the console
                                    property 'forge.logging.console.level', 'debug'

                                    mods
                                            {
                                                mineminenomi
                                                        {
                                                            source sourceSets.main
                                                        }
                                            }
                                }

                        server
                                {
                                    arg "-mixin.config=${mod_id}.mixins.json"

                                    workingDirectory project.file('run')

                                    // Recommended logging data for a userdev environment
                                    property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

                                    // Recommended logging level for the console
                                    property 'forge.logging.console.level', 'debug'

                                    mods
                                            {
                                                mineminenomi
                                                        {
                                                            source sourceSets.main
                                                        }
                                            }
                                }

                        data
                                {
                                    workingDirectory project.file('run')

                                    property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
                                    property 'forge.logging.console.level', 'debug'
                                    property 'fml.earlyprogresswindow', 'false'

                                    args '--mod', 'mineminenomi', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

                                    environment 'target', 'fmluserdevdata'
                                    mods
                                            {
                                                mineminenomi
                                                        {
                                                            source sourceSets.main
                                                        }
                                            }
                                }
                    }
        }

// Include resources generated by data generators.
// sourceSets.main.resources { srcDir 'src/generated/resources' }

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xmaxerrs" << "5000"
    }
}

repositories
        {
            flatDir { dirs 'libs' }
        }

dependencies
        {
            minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

            // compileOnly fg.deobf(name: 'imsama-1.14.4-1.0.0')
        }

task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'source'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

build.dependsOn sourceJar, deobfJar

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
}

jar {
    manifest {
        attributes([
                "MixinConfigs": "${mod_id}.mixins.json"
        ])
    }
}

